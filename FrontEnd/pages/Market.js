import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import Layout from '@/components/Layout/Layout';
import { useAccount, useProvider, useSigner } from 'wagmi';
import { Text, Flex, Button, Input, useToast } from '@chakra-ui/react';
import { Alert, AlertIcon, AlertTitle, AlertDescription } from '@chakra-ui/react';
import { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react'
import { useState } from 'react';
import { ethers } from 'ethers';
import { NFTCollectionFactory } from "../public/constants";


export default function Finance() {

  const { address, isConnected } = useAccount()
  const provider = useProvider()
  const { data: signer } = useSigner()
  const toast = useToast()
  const router = useRouter()

  const [projectName, setProjectName] = useState("");
  const [launcher, setLauncher] = useState("");
  const [baseURI, setBaseURI] = useState("");
  const [publicPrice, setPublicPrice] = useState("");
  const [maxSupply, setMaxSupply] = useState("");
  const [numbID, setNumbID] = useState("");
  

  const createNFTCollection = async () => {
    
    console.log(NFTCollectionFactory);
    const nftCollectionFactoryAddress = NFTCollectionFactory.addressLocal;
    console.log(nftCollectionFactoryAddress);
    const contract = new ethers.Contract(
      nftCollectionFactoryAddress,
      NFTCollectionFactory.ABI,
      signer
    );
  
    try {
      const tx = await contract.createNFTCollection(
        projectName,
        launcher,
        baseURI,
        ethers.utils.parseEther(publicPrice),
        maxSupply,
        numbID
      );
      await tx.wait();
      toast({
            title: 'Congratulations',
            description: "NFT Collection Created!",
            status: 'success',
            duration: 4000,
            isClosable: true,
        })
    } catch (e) {
      toast({
        title: 'Error',
        description: "Failed to create NFT Collection.",
        status: 'error',
        duration: 4000,
        isClosable: true,
    })
    console.log(e)
  };
};
  
  return (
    <>
      <Head>
        <title>DApp4Movies : Finance</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
      <Tabs variant='soft-rounded' colorScheme='blue' position='absolute' top='15vh'>
        <TabList>
            <Tab>Proposer Panel</Tab>
            <Tab>Admin Panel</Tab>
        </TabList>
        {isConnected ? (
          <TabPanels id="tab">
              <TabPanel>
              <Flex direction="column" alignItems="center">
                <h1>Finance your Project !</h1>
                <Input
                  placeholder="Project Name"
                  value={projectName}
                  onChange={(e) => setProjectName(e.target.value)}
                />
                <Input
                  placeholder="Launcher"
                  value={launcher}
                  onChange={(e) => setLauncher(e.target.value)}
                />
                <Input
                  placeholder="Base URI"
                  value={baseURI}
                  onChange={(e) => setBaseURI(e.target.value)}
                />
                <Input
                  placeholder="Public Price"
                  value={publicPrice}
                  onChange={(e) => setPublicPrice(e.target.value)}
                />
                <Input
                  placeholder="Max Supply"
                  value={maxSupply}
                  onChange={(e) => setMaxSupply(e.target.value)}
                />
                <Input
                  placeholder="Numb ID"
                  value={numbID}
                  onChange={(e) => setNumbID(e.target.value)}
                />
                <Button colorScheme="blue" onClick={createNFTCollection}>
                  Create NFT Collection
                </Button>
              </Flex>
              </TabPanel>

              <TabPanel>
              <h1>admin Pannel</h1>
              </TabPanel>
            </TabPanels>
          ) : (
            <Alert status="warning" width="50%">
              <AlertIcon />
              Please, connect your Wallet!
            </Alert>
          )}
        </Tabs>
      </Layout>
    </>
    

  );
};